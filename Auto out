pcall(function()
    queue_on_teleport([[local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

while true do
wait(0.1)
for _, player in ipairs(Players:GetPlayers()) do
if player ~= LocalPlayer and LocalPlayer:IsFriendsWith(player.UserId) then
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local PlaceId = game.PlaceId
local JobId = game.JobId

local function notify(title, text)
    print(title .. ": " .. text) 
end

local servers = {}
local success, response = pcall(function()
    return game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true")
end)

if success then
    local body = HttpService:JSONDecode(response)
    if body and body.data then
        for _, v in next, body.data do
            if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                table.insert(servers, 1, v.id)
            end
        end
    end

    if #servers > 0 then
        TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer)
    else
        notify("Serverhop", "Couldn't find a server.")
    end
else
    notify("Error", "Failed to fetch server list.")
end
break
end
end
end]])
end)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

while true do
wait(0.1)
for _, player in ipairs(Players:GetPlayers()) do
if player ~= LocalPlayer and LocalPlayer:IsFriendsWith(player.UserId) then
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local PlaceId = game.PlaceId
local JobId = game.JobId

local function notify(title, text)
    print(title .. ": " .. text) 
end

local servers = {}
local success, response = pcall(function()
    return game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true")
end)

if success then
    local body = HttpService:JSONDecode(response)
    if body and body.data then
        for _, v in next, body.data do
            if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                table.insert(servers, 1, v.id)
            end
        end
    end

    if #servers > 0 then
        TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer)
    else
        notify("Serverhop", "Couldn't find a server.")
    end
else
    notify("Error", "Failed to fetch server list.")
end
break
end
end
end
