_G.test2 = true
while _G.test2 do
    game:GetService("ReplicatedStorage").Remotes.Block:FireServer(true)
    task.wait(0.005)
end

local Players = game:GetService("Players")
local player = Players.LocalPlayer

local teleportY = -3800
local respawnPosition
local supportPart
local healthChangedConnection

local function createSupportPart(position)
    if not supportPart then
        supportPart = Instance.new("Part")
        supportPart.Size = Vector3.new(10, 1, 10)
        supportPart.Anchored = true
        supportPart.CanCollide = true
        supportPart.Transparency = 0.9
        supportPart.BrickColor = BrickColor.new("Bright yellow")
        supportPart.Name = "SupportPart"
        supportPart.Parent = workspace
    end
    supportPart.Position = position + Vector3.new(0, 0.5, 0)
end

local function teleportLoop(hrp, targetPos, duration, interval)
    local repetitions = math.floor(duration / interval)
    for i = 1, repetitions do
        hrp.CFrame = CFrame.new(targetPos)
        task.wait(interval)
    end
end

local function onCharacterAdded(character)
    local humanoid = character:WaitForChild("Humanoid")
    local hrp = character:WaitForChild("HumanoidRootPart")

    if respawnPosition then
        teleportLoop(hrp, respawnPosition, 1, 0.1)
        respawnPosition = nil
        if supportPart then
            supportPart:Destroy()
            supportPart = nil
        end
    end

    if healthChangedConnection then
        healthChangedConnection:Disconnect()
    end

    healthChangedConnection = humanoid.HealthChanged:Connect(function(health)
        if health <= 10 and health > 0 then
            local pos = hrp.Position
            respawnPosition = pos
            createSupportPart(Vector3.new(pos.X, teleportY, pos.Z))
            hrp.CFrame = CFrame.new(pos.X, teleportY, pos.Z)
        end
    end)
end

if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

print("godmode")
