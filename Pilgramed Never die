local Players = game:GetService("Players")
local player = Players.LocalPlayer

local teleportY = -3850
local respawnPosition = nil
local supportPart = nil
local healthChangedConnection = nil

local function createSupportPart(position)
    if supportPart then
        supportPart:Destroy()
    end
    supportPart = Instance.new("Part")
    supportPart.Size = Vector3.new(10, 1, 10)
    supportPart.Anchored = true
    supportPart.CanCollide = true
    supportPart.Position = position + Vector3.new(0, 0.5, 0)
    supportPart.Transparency = 0.9
    supportPart.BrickColor = BrickColor.new("Bright yellow")
    supportPart.Name = "SupportPart"
    supportPart.Parent = workspace
end

local function teleportLoop(hrp, targetPos, duration, interval)
    local repetitions = math.floor(duration / interval)
    for i = 1, repetitions do
        hrp.CFrame = CFrame.new(targetPos)
        wait(interval)
    end
end

local function onCharacterAdded(character)
    local humanoid = character:WaitForChild("Humanoid")
    local hrp = character:WaitForChild("HumanoidRootPart")

    if respawnPosition then
        spawn(function()
            teleportLoop(hrp, respawnPosition, 1, 0.2)
            respawnPosition = nil
            if supportPart then
                supportPart:Destroy()
                supportPart = nil
            end
        end)
    end

    if healthChangedConnection then
        healthChangedConnection:Disconnect()
        healthChangedConnection = nil
    end

    healthChangedConnection = humanoid.HealthChanged:Connect(function(health)
        if health <= 10 and health > 0 then
            local pos = hrp.Position
            respawnPosition = Vector3.new(pos.X, pos.Y, pos.Z)
            createSupportPart(Vector3.new(pos.X, teleportY, pos.end
            hrp.CFrame = CFrame.new(pos.X, teleportY, pos.Z)
        end
    end)
end

if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local toolName = nil

local function equipSavedTool()
	if not toolName then return end
	local backpack = player:WaitForChild("Backpack")
	repeat wait(0.1) until backpack:FindFirstChild(toolName)
	local tool = backpack:FindFirstChild(toolName)
	if tool then
		tool.Parent = player.Character
	end
end

player.CharacterAdded:Connect(function(char)
	local humanoid = char:WaitForChild("Humanoid")

	humanoid.HealthChanged:Connect(function(hp)
		if hp <= 10 then
			local tool = player.Character:FindFirstChildOfClass("Tool")
			if tool then
				toolName = tool.Name
			end
		elseif hp >= humanoid.MaxHealth and toolName then
			task.delay(1, equipSavedTool)
		end
	end)

	task.delay(1, equipSavedTool)
end)
